{"version":3,"sources":["../../server/controllers/DeveloperController.js"],"names":["mongoose","require","Developers","exports","getDevelopers","req","res","next","find","exec","err","users","status","send","data","error","success","newDeveloper","developerData","first_name","body","last_name","email","stack","split","map","elem","trim","github_url","developers","save","then","user","catch","console","log"],"mappings":";;AAAA,IAAMA,WAAWC,QAAQ,UAAR,CAAjB;AACA,IAAMC,aAAaD,QAAQ,sBAAR,CAAnB;;AAEAE,QAAQC,aAAR,GAAwB,UAACC,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAC1C,SAAOL,WACJM,IADI,CACC,EADD,EAEJC,IAFI,CAEC,UAACC,GAAD,EAAMC,KAAN,EAAgB;AACpB,QAAID,GAAJ,EAAS;AACP,aAAOJ,IAAIM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,MAAM,EAAEC,OAAOL,GAAT,EAAcE,QAAQ,GAAtB,EAA2BI,SAAS,KAApC,EAAR,EAArB,CAAP;AACD,KAFD,MAEO;AACL,aAAOV,IAAIM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,MAAM,EAAEH,YAAF,EAASC,QAAQ,GAAjB,EAAsBI,SAAS,IAA/B,EAAR,EAArB,CAAP;AACD;AACF,GARI,CAAP;AASD,CAVD;;AAYAb,QAAQc,YAAR,GAAuB,UAACZ,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AACzC,MAAMW,gBAAgB;AACpBC,gBAAYd,IAAIe,IAAJ,CAASD,UADD;AAEpBE,eAAWhB,IAAIe,IAAJ,CAASC,SAFA;AAGpBC,WAAOjB,IAAIe,IAAJ,CAASE,KAHI;AAIpBC,WAAOlB,IAAIe,IAAJ,CAASG,KAAT,CAAeC,KAAf,CAAqB,GAArB,EAA0BC,GAA1B,CAA8B,UAACC,IAAD;AAAA,aAAUA,KAAKC,IAAL,EAAV;AAAA,KAA9B,CAJa;AAKpBC,gBAAYvB,IAAIe,IAAJ,CAASQ;AALD,GAAtB;AAOAC,eAAa,IAAI3B,UAAJ,CAAegB,aAAf,EAA8BY,IAA9B,GACZC,IADY,CACP,YAAM;AACV,WAAOzB,IAAIM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,MAAM,EAAEkB,MAAMd,aAAR,EAAuBN,QAAQ,GAA/B,EAAoCI,SAAS,IAA7C,EAAR,EAArB,CAAP;AACD,GAHY,EAGViB,KAHU,CAGJ,UAACvB,GAAD,EAAS;AAChBwB,YAAQC,GAAR,CAAYzB,GAAZ;AACA,WAAOJ,IAAIM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,MAAM,EAAEC,OAAOL,GAAT,EAAcE,QAAQ,GAAtB,EAA2BI,SAAS,KAApC,EAAR,EAArB,CAAP;AACD,GANY,CAAb;AAOD,CAfD","file":"DeveloperController.js","sourcesContent":["const mongoose = require('mongoose');\nconst Developers = require('../models/developers');\n\nexports.getDevelopers = (req, res, next) => {\n  return Developers\n    .find({})\n    .exec((err, users) => {\n      if (err) {\n        return res.status(500).send({ data: { error: err, status: 500, success: false } });\n      } else {\n        return res.status(200).send({ data: { users, status: 200, success: true } });\n      }\n    });\n}\n\nexports.newDeveloper = (req, res, next) => {\n  const developerData = {\n    first_name: req.body.first_name,\n    last_name: req.body.last_name,\n    email: req.body.email,\n    stack: req.body.stack.split(',').map((elem) => elem.trim()),\n    github_url: req.body.github_url\n  };\n  developers = new Developers(developerData).save()\n  .then(() => {\n    return res.status(201).send({ data: { user: developerData, status: 201, success: true } });\n  }).catch((err) => {\n    console.log(err);\n    return res.status(500).send({ data: { error: err, status: 500, success: false } });\n  });\n}\n"]}